# Vuln 1: Weak Randomness: `BenchmarkTest00023.java:45-46`

* Severity: Medium
* Category: `weak_randomness`
* Description: The application uses `java.util.Random().nextFloat()` to generate a remember-me token, which is cryptographically weak and predictable.
* Exploit Scenario: An attacker could predict the sequence of random numbers generated by `java.util.Random()`, allowing them to forge remember-me tokens and impersonate other users. Since the token is derived directly from the random float value (with only the "0." prefix trimmed), it has limited entropy and follows a predictable pattern.
* Recommendation: Replace `java.util.Random` with `java.security.SecureRandom` for generating security-sensitive tokens. Additionally, consider using a longer token with higher entropy, such as a UUID or a cryptographically secure random byte array encoded as Base64.

```java
// Replace this:
float rand = new java.util.Random().nextFloat();
String rememberMeKey = Float.toString(rand).substring(2);

// With this:
byte[] randomBytes = new byte[16]; // 128 bits of entropy
new java.security.SecureRandom().nextBytes(randomBytes);
String rememberMeKey = java.util.Base64.getEncoder().encodeToString(randomBytes);
```